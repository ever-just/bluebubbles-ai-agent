import { resultRetryer } from "@server/helpers/utils";
import { getLogger } from "../logging/Loggable";

export const AsyncRetryer = <T extends (...args: any[]) => any>({
    name,
    maxTries = 3,
    retryDelay = 1000,
    onSuccess = null,
    onError = null,
    retryCondition = null
}: {
    name: string;
    maxTries?: number;
    retryDelay?: number;
    /**
     * Function called when the tried method call succeeds.
     *
     * @param data The data returned by the method call
     * @returns The value you want passed to the dataLoopCondition
     */
    onSuccess?: (data: any) => any;
    /**
     * Function called when the tried method call fails.
     *
     * @param error The error message generated by the method call.
     * @returns The value you want passed to the dataLoopCondition
     */
    onError?: (error: any) => any;
    /**
     * Function called to "check" the data returned by the method call.
     * This will be used to determine if the method call should be retried.
     *
     * @param data The data returned by the method call (or onError function call)
     * @returns A boolean indicating if the method call should be retried.
     */
    retryCondition?: (data: any) => boolean;
}): MethodDecorator => {
    return (_target: any, _propertyKey: string | symbol, descriptor: PropertyDescriptor) => {
        const originalMethod = descriptor.value;

        descriptor.value = async function (...args: any[]): Promise<ReturnType<T>> {
            const logger = getLogger(name);
            let error: any;
            let counter = 0;
            const result = await resultRetryer({
                maxTries,
                delayMs: retryDelay,
                getData: async () => {
                    counter += 1;
                    try {
                        const data = await originalMethod.apply(this, args);
                        error = undefined;

                        if (onSuccess) return onSuccess(data);
                        return data;
                    } catch (ex: any) {
                        error = ex;
                        logger.debug(`Error executing method, '${name}' on attempt ${counter} of ${maxTries}!`);
                        logger.debug(`  -> Execution Error: ${ex?.message ?? String(ex)}`);

                        if (onError) return onError(ex as Error) ?? null;
                        return null;
                    }
                },
                dataLoopCondition: retryCondition
            });

            if (error) {
                logger.debug(`Method, '${name}', failed after ${maxTries} attempts!`);
                throw error;
            }

            return result;
        };

        return descriptor;
    };
};
